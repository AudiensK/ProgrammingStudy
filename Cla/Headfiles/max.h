// 头文件
// 在使用和定义这个函数的地方都应该#include这个头文件
// 一般做法是任何.c都有对应的同名.h，把所有 对外公开 的函数原型和全局变量的声明都放进去

// 把函数原型放到一个头文件（.h结尾）中，在需要调用这个函数的源代码文件（.c）\
中#include这个头文件，就能让编译器在编译时知道函数的原型

// 除了函数声明，头文件中还可以放入结构体 / 联合体 / 枚举声明、类型定义、宏定义、内联函数等
// 应避免放入函数实现、全局变量定义、静态变量或函数、非必要的头文件包含
/*
错误：包含不必要的头文件会增加编译依赖
#include <stdio.h>  // 若头文件中未直接使用stdio的符号，应避免包含
正确：在.c文件中包含
*/
// 通过查看预编译后的代码.i文件可以看到#include "max.h"被替换成头文件中的函数声明


#ifndef _MAX_H_
#define _MAX_H_

#include <stdbool.h>  // 仅在头文件中包含必要的头文件

extern int gAll;  // 在头文件中声明外部全局变量以供其他文件使用过
// extern主要用于声明外部（external）变量或函数，告诉编译器该符号（变量 / 函数）的定义在别处（可能在其他源文件或当前文件的后面部分）。
// int gAll;是变量的定义，在前面加上extern就变成声明了

double max(int a, int b);
bool if_abtb(int a, int b);

#endif

// 声明和定义
// 声明是不产生代码的东西：\
    函数原型、变量声明、结构声明、宏声明、枚举声明、类型声明、inline(内联)函数\
// 定义是产生代码的东西：函数、全局变量、声明变量并初始化\
    定义会分配内存（如变量、函数体），声明不会\
    定义只能有一次（One Definition Rule），声明可多次。\
    extern 通常表示声明（但不绝对，如 extern int a = 10; 是定义）。

// 只有声明可以放在头文件中，但这不是强制规定，\
在头文件中定义会造成一个项目中多个编译单元有重名实体\
造成多重定义错误、代码膨胀、内存浪费等问题\
某些编译器允许几个编译单元中存在重名的函数，或者用weak修饰符来强调这种存在

// 头文件应仅包含声明（如函数原型、extern变量、类型定义），\
避免直接定义全局变量或实现函数。遵循声明与定义分离的原则，可确保代码的可维护性和编译正确性。

// 重复声明\
同一个编译单元里，同名结构不能被重复声明\
如果你的头文件里有结构声明，很难避免这个头文件不会在一个编译单元里被多次#include\
    比如说在另外一个头文件max2.h里面#include max.h，然后又在这个编译单元里#include max2.h，就会造成重复声明\
所以需要“标准头文件结构”
/* 标准头文件结构
#ifndef _MAX_H_  // if not def 条件判断，如果没有定义_MAX_H_
#define _MAX_H_

/函数声明\结构声明等内容/

#endif  // 结束条件判断
*/
// 运用条件和宏，确保这个头文件在一个编译单元只被#include一次
// #pragma once 也能起到相同作用，但不是所有编译器都支持
