// 内联函数是一种请求编译器将函数体直接嵌入到调用位置的函数。\
这样可以避免函数调用时的栈帧创建、参数传递和返回值处理等开销。

// 内联函数最适合以下场景：
// 函数体非常小（通常只有几行代码）;被频繁调用的函数;代码执行时间远小于函数调用开销的函数

// 优点：减少函数调用开销，提高执行效率;没有参数压栈、栈帧创建和销毁等开销;对于短小函数，性能提升明显

// 缺点：可能增加代码体积（因为函数体被复制到多个调用点）;\
编译器可能忽略 inline 请求（内联只是建议，不是强制）;调试困难（因为实际执行的代码与源代码不同）

// 在现代 C++ 中，编译器的优化能力已经很强，对于短小的函数，即使没有显式声明为inline，编译器也可能会自动进行内联优化。\
因此，不要过度依赖inline关键字，应该让编译器决定何时进行内联。

#include <iostream>


void log(int number);  // 如果需要使用内联，最优做法是在头文件中声明函数时不使用inline

int main(void)
{
    int a = 10;
    log(a);

    system("pause");
    return 0;
}

inline void log(int number)  // 在源文件中定义函数时使用inline
{
    std::cout << "number is " << number << std::endl;
}


// 在类定义内部直接定义的成员函数会被隐式视为内联函数
class MyClass {
public:
    int add(int a, int b) { // 隐式内联
        return a + b;
    }
};